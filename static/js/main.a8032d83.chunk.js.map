{"version":3,"sources":["components/Header.js","components/Footer.js","components/Featured.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","className","Component","Footer","classname","href","Featured","this","props","data","console","log","players","map","player","info","analysis","highlight","key","player_id","alt","full_name","src","image","App","state","foo","playerData","$","ajax","url","dataType","cache","success","setState","bind","error","xhr","status","err","alert","getPlayerData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0PAgBeA,G,6KAZP,OACI,4BAAQC,GAAG,QACP,yBAAKC,UAAU,UACX,+CACA,iGACA,wBAAIA,UAAU,gB,GAPbC,cC0BNC,E,uKAxBP,OACI,gCACI,yBAAKC,UAAU,OACX,6BACA,yBAAKH,UAAU,aACX,sDAEJ,yBAAKA,UAAU,aACX,4CAAiB,uBAAGA,UAAU,OAAOI,KAAK,6BAAzB,YAAjB,MAEJ,yBAAKJ,UAAU,aACX,6DACmC,6BADnC,0CAE2C,6BAF3C,oCAGqC,qC,GAhBxCC,aC8ENI,E,uKA3EP,GAAIC,KAAKC,MAAMC,KAAM,CACjBC,QAAQC,IAAIJ,KAAKC,MAAMC,MACvB,IAAIG,EAAUL,KAAKC,MAAMC,KAAKG,QAAQC,KAAI,SAASC,GAC/C,IAAIC,EAAOD,EAAOC,KACdC,EAAWF,EAAOE,SAClBC,EAAY,GAQhB,OANIA,EADAD,EAAS,IAAMA,EAAS,GACZ,QACLA,EAAS,IAAMA,EAAS,GACnB,SAEA,MAET,yBAAKE,IAAKH,EAAKI,UAAWlB,UAAU,uBACvC,yBAAKA,UAAU,eAAeD,GAAIiB,GAC9B,yBAAKG,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,QADxC,IACiD,6BAC7C,0BAAMtB,UAAU,eAAhB,IAAgCc,EAAKM,YAEzC,yBAAKpB,UAAU,eACX,yBAAKA,UAAU,mBACX,0BAAMA,UAAU,YAAhB,aACee,EAAS,IACjB,6BACP,0BAAMf,UAAU,YAAhB,cACgBe,EAAS,IAClB,6BACP,0BAAMf,UAAU,YAAhB,cACgBe,EAAS,IAClB,mCAM3B,OACI,iCACA,yBAAKf,UAAU,oBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACX,mDACA,yBAAKA,UAAU,aACX,qCAEJ,yBAAKA,UAAU,aACX,qCAEJ,yBAAKA,UAAU,aACX,sCAGR,yBAAKA,UAAU,WACX,kEACA,yBAAKA,UAAU,aACX,qCAEJ,yBAAKA,UAAU,aACX,qCAEJ,yBAAKA,UAAU,aACX,uCAIZ,yBAAKA,UAAU,OACX,6BACI,oDACCW,U,GArEFV,aC6CRsB,E,kDAtCX,WAAYhB,GAAO,IAAD,8BACd,cAAMA,IACDiB,MAAQ,CACTC,IAAK,MACLC,WAAY,IAJF,E,4DASdC,IAAEC,KAAK,CACHC,IAAI,kCACJC,SAAS,OACTC,OAAO,EACPC,QAAS,SAASxB,GACdF,KAAK2B,SAAS,CAACzB,KAAMA,KACvB0B,KAAK5B,MACP6B,MAAO,SAASC,EAAKC,EAAQC,GACzB7B,QAAQC,IAAI4B,GACZC,MAAMD,Q,0CAMdhC,KAAKkC,kB,+BAIL,OACI,yBAAKxC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUQ,KAAMF,KAAKkB,MAAMhB,OAC3B,kBAAC,EAAD,W,GAlCEP,aCKEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACL1B,QAAQ0B,MAAMA,EAAMsB,a","file":"static/js/main.a8032d83.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header id=\"home\">\n                <div className=\"banner\">\n                    <h1>Fantasy Tracker</h1>\n                    <p>A Yahoo! Fantasy based Application to track and display NBA trends</p>\n                    <hr className=\"intro\"/>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div classname=\"row\">\n                    <hr/>\n                    <div className=\"three-col\">\n                        <p> Made by Dmitry Kutin </p>\n                    </div>\n                    <div className=\"three-col\">\n                        <p> Check out my <a className=\"link\" href=\"https://github.com/dkutin\"> Github </a> </p>\n                    </div>\n                    <div className=\"three-col\">\n                        <p>\n                            Green: Player performing well. <br/>\n                            Yellow: Unsure of players performance. <br/>\n                            Red: Player is under performing. <br/>\n                        </p>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\n\nexport default Footer;\n","import React, {Component} from \"react\";\n\nclass Featured extends Component {\n    render() {\n\n        if (this.props.data) {\n            console.log(this.props.data);\n            var players = this.props.data.players.map(function(player){\n                var info = player.info;\n                var analysis = player.analysis;\n                var highlight = '';\n                if (analysis[1] >= analysis[2]) {\n                    highlight = 'green';\n                } else if (analysis[1] >= analysis[4]) {\n                    highlight = 'yellow';\n                } else {\n                    highlight = 'red';\n                }\n                return <div key={info.player_id} className=\"six-col player-item\">\n                    <div className=\"player-image\" id={highlight}>\n                        <img alt={info.full_name} src={info.image}/> <br/>\n                        <span className=\"player-name\"> {info.full_name}</span>\n                    </div>\n                    <div className=\"player-info\">\n                        <div className=\"player-analysis\">\n                            <span className=\"analysis\">\n                                One Week: {analysis[1]}\n                            </span><br/>\n                            <span className=\"analysis\">\n                                Two Weeks: {analysis[2]}\n                            </span><br/>\n                            <span className=\"analysis\">\n                                One Month: {analysis[4]}\n                            </span><br/>\n                        </div>\n                    </div>\n                </div>\n            })\n        }\n        return (\n            <section>\n            <div className=\"featured-content\">\n                <div className=\"row\">\n                    <div className=\"two-col\">\n                        <h2>Top Fantasy Players</h2>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                    </div>\n                    <div className=\"two-col\">\n                        <h2>Top Fantasy Players in Your League</h2>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                        <div className=\"three-col\">\n                            <p>3 Col</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div>\n                        <h2> All Fantasy Players</h2>\n                        {players}\n                    </div>\n                </div>\n            </div>\n            </section>\n        );\n    }\n}\n\nexport default Featured;\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Featured from './components/Featured';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            foo: 'bar',\n            playerData: {}\n        };\n    }\n\n    getPlayerData(){\n        $.ajax({\n            url:\"/fantasytracker/playerData.json\",\n            dataType:'json',\n            cache: false,\n            success: function(data){\n                this.setState({data: data});\n            }.bind(this),\n            error: function(xhr, status, err){\n                console.log(err);\n                alert(err);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.getPlayerData();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <Featured data={this.state.data}/>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}