{"version":3,"sources":["components/Header.js","components/Footer.js","components/Stats.js","components/Featured.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","className","Component","Footer","href","Stats","this","props","data","count","playerStats","map","week","pts","ast","reb","blk","stl","trn","Featured","players","player","info","analysis","stats","highlight","key","player_id","alt","full_name","src","image","App","state","foo","playerData","$","ajax","url","dataType","cache","success","setState","bind","error","xhr","status","err","console","log","alert","getPlayerData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.82896879.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header id=\"home\">\n                <div className=\"banner\">\n                    <h1>Fantasy Tracker</h1>\n                    <p>A Yahoo! Fantasy based Application to track and display NBA trends, while a work in progress, this application has big goals in mind wiht user functions to log in and see personalized stats for your fantasy league.</p>\n                </div>\n                \n                {/* <div id=\"menu\">\n                    <button onclick=\"toggleMenu()\">Hide/Show</button>\n                    <span> This is some content that I want to stick</span>\n                    <span></span>\n                    <span></span>\n                </div> */}\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div id=\"footer\">\n                    <hr/>\n                    <div className=\"two-col\">\n                        <p> Made by Dmitry Kutin </p>\n                    </div>\n                    <div className=\"two-col\">\n                        <p> Check out my <a className=\"link\" href=\"https://github.com/dkutin\"> Github </a> </p>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\n\nexport default Footer;\n","import React, {Component} from \"react\";\n\nclass Stats extends Component {\n    render() {\n\n        if (this.props.data) {\n            var count = 0;\n            var playerStats = this.props.data.map(function (data) {\n                // eslint-disable-next-line array-callback-return\n                if (count === 2) return;\n                count++;\n                return (<span className=\"stat-entry\">\n                    <strong>Week {data.week} </strong> <hr/> Pts: {data.pts} | Ast: {data.ast} | Reb: {data.reb} | Blk: {data.blk} | Stl: {data.stl} | TO: {data.trn}\n                </span>);\n            });\n\n        }\n\n        return (\n            <div className=\"player-stats\">\n                {playerStats}\n            </div>);\n    }\n}\n\nexport default Stats;\n\n","import React, {Component} from \"react\";\nimport Stats from './Stats';\n\nclass Featured extends Component {\n    render() {\n\n        if (this.props.data) {\n            var players = this.props.data.players.map(function(player){\n                var info = player.info;\n                var analysis = player.analysis;\n                var stats = player.stats;\n                var highlight = '';\n\n                // Check that all values are set.\n                if (typeof analysis[1] == 'undefined') analysis[1] = 0.00;\n                if (typeof analysis[2] == 'undefined') analysis[2] = 0.00;\n                if (typeof analysis[4] == 'undefined') analysis[4] = 0.00;\n                \n                // TODO: This is going to need rework as to how we suggest players\n                if (analysis[1] >= analysis[2]) {\n                    highlight = 'green';\n                } else if (analysis[4] >= analysis[1] &&\n                    analysis[4] >= analysis[2]) {\n                    highlight = 'red';\n                } else {\n                    highlight = 'yellow';\n                }\n                return <div key={info.player_id} className=\"two-col player-item\">\n                    <div className=\"player-feature\">\n                        <img className=\"player-image\" id={highlight} alt={info.full_name} src={info.image}/> <br/>\n                        <span className=\"player-name\"> {info.full_name}</span>\n                        <div className=\"player-analysis\">\n                            <span className=\"analysis\">\n                                <strong> One Week </strong>: {analysis[1]}\n                            </span><br/>\n                            <span className=\"analysis\">\n                                <strong> Two Weeks </strong>: {analysis[2]}\n                            </span><br/>\n                            <span className=\"analysis\">\n                                <strong> One Month </strong>: {analysis[4]}\n                            </span><br/>\n                        </div>\n                    </div>\n                    <Stats key={info.player_id} data={stats}/>\n                </div>\n            })\n        }\n        return (\n            <section>\n            <div className=\"featured-content\">\n                <div className=\"row\">\n                    <div>\n                        <h2 className=\"section-title\"> All Players </h2>\n                        {players}\n                    </div>\n                </div>\n            </div>\n            </section>\n        );\n    }\n}\n\nexport default Featured;\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Featured from './components/Featured';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            foo: 'bar',\n            playerData: {}\n        };\n    }\n\n    getPlayerData(){\n        $.ajax({\n            url:\"/fantasytracker/playerData.json\",\n            dataType:'json',\n            cache: false,\n            success: function(data){\n                this.setState({data: data});\n            }.bind(this),\n            error: function(xhr, status, err){\n                console.log(err);\n                alert(err);\n            }\n        });\n    }\n\n    componentDidMount(){\n        this.getPlayerData();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <Featured data={this.state.data}/>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}